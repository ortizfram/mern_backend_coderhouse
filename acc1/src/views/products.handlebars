<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Page</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #container {
      display: flex;
      width: 100%;
      height: 100vh;
    }
    #prod-div, #cart-div {
      flex: 1;
      padding: 20px;
      box-sizing: border-box;
      overflow-y: auto;
    }
    #prod-div {
      border-right: 1px solid #ddd;
    }
    button {
      padding: 10px 15px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }
    button a {
      color: white;
      text-decoration: none;
    }
    #user-actions button {
      margin: 5px;
    }
    #prod-container {
      margin-bottom: 20px;
    }
    hr {
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h1>Productos</h1>
  <p style="color: blue;">Holaaa! {{firstName}} Bienvenid@</p>
  <p style="color: green;">admin: {{isAdmin}}</p>
  <button onclick="logout()">logout</button>
  <br />
  <br />
  <button><a href="/">Home</a></button>

  <div id="container">
    <div id="prod-div">
      {{#if isAdmin}}
      <button style="background:green;">
        <a href="#" style="color:white;" onclick="addNewProduct()">Create New Product</a>
      </button>
      {{/if}}

      <!-- Display products -->
      {{#if products.length}}
      <ul>
        {{#each products}}
        <li id="prod-container">
          {{#if ../isAdmin}}
          <div id="admin-actions" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
            <button style="background-color:blue;color:white" onclick="updateProduct('{{this._id}}')">Update</button>
            <button style="background-color:red;" onclick="deleteProduct('{{this._id}}')">Delete</button>
          </div>
          {{else}}
          <div id="user-actions" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
            <button style="background-color: #4CAF50; color: white;" onmouseover="this.style.backgroundColor='#45a049';" onmouseout="this.style.backgroundColor='#4CAF50';" onclick="addProductToCart('{{this._id}}')">+</button>
            <button style="background-color: #f44336; color: white;" onmouseover="this.style.backgroundColor='#e53935';" onmouseout="this.style.backgroundColor='#f44336';" onclick="removeProductFromCart('{{this._id}}')">-</button>
          </div>
          {{/if}}

          <div id="prod-content">
            <h2>Title: {{this.title}}</h2>
            <p>Description: {{this.description}}</p>
            <p>$ {{this.price}}</p>
            <p>Stock: {{this.stock}}</p>
            <p>Category: {{this.category}}</p>
          </div>
          <hr />
        </li>
        {{/each}}
      </ul>
      {{else}}
      <p>No products available.</p>
      {{/if}}
    </div>

    <!-- Cart section -->
    <div id="cart-div">
      <h2>Your Cart <span id="cart-id"></span></h2>
      <div id="cart-content"></div>
    </div>
  </div>

  <script>
    function logout() {
      fetch("/api/sessions/logout", {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      }).then(response => {
        if (response.ok) {
          console.log("logged-out");
          window.location.href = "/api/sessions/login";
        } else {
          console.error("Error logging out");
        }
      }).catch(error => console.error("Error:", error));
    }

    function addNewProduct() {
      const title = prompt("Enter product title:");
      const description = prompt("Enter product description:");
      const price = prompt("Enter product price:");
      const stock = prompt("Enter product stock:");
      const category = prompt("Enter product category:");

      if (title && description && price && stock && category) {
        const newProduct = { title, description, price, stock, category, status: "active" };
        fetch("/api/products", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(newProduct)
        }).then(response => {
          if (response.ok) {
            alert("Product added successfully!");
            location.reload();
          } else {
            response.json().then(errorData => {
              throw new Error(errorData.error || 'Failed to add product');
            });
          }
        }).catch(error => {
          alert("Failed to add product: " + error.message);
        });
      }
    }

    function updateProduct(productId) {
      fetch(`/api/products/${productId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error("Failed to fetch product details");
          }
          return response.json();
        })
        .then(product => {
          const newTitle = prompt("Enter new title:", product.title);
          const newDescription = prompt("Enter new description:", product.description);
          const newPrice = prompt("Enter new price:", product.price);
          const newStock = prompt("Enter stock for product:", product.stock);
          const newCategory = prompt("Enter category for product:", product.category);
          const newStatus = prompt("Enter status 'active':", product.status);

          if (newTitle && newDescription && newPrice && newStock && newCategory && newStatus) {
            const updatedProduct = { title: newTitle, description: newDescription, price: parseFloat(newPrice), stock: parseInt(newStock, 10), category: newCategory, status: newStatus };
            fetch(`/api/products/${productId}`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(updatedProduct)
            }).then(response => {
              if (response.ok) {
                alert("Product updated successfully!");
                location.reload();
              } else {
                response.json().then(errorData => {
                  throw new Error(errorData.error || 'Failed to update product');
                });
              }
            }).catch(error => {
              alert("Failed to update product: " + error.message);
            });
          }
        })
        .catch(error => {
          alert("Failed to fetch product details: " + error.message);
        });
    }

    function deleteProduct(productId) {
      if (confirm("Are you sure you want to delete this product?")) {
        fetch(`/api/products/${productId}`, {
          method: "DELETE",
          headers: { "Content-Type": "application/json" },
        }).then(response => {
          if (response.ok) {
            alert("Product deleted 👍");
            location.reload();
          } else {
            alert("Failed to delete product.");
          }
        }).catch(error => console.error("Error:", error));
      }
    }

    let cartId = localStorage.getItem('cartId');

    async function createCart() {
      if (!cartId) {
        try {
          const response = await fetch('/api/cart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
          });
          const data = await response.json();
          cartId = data.id;
          localStorage.setItem('cartId', cartId);
          console.log('Cart created with ID:', cartId);
        } catch (error) {
          console.error('Error creating cart:', error);
        }
      } else {
        console.log('Using existing cart ID:', cartId);
      }

      document.getElementById('cart-id').textContent = cartId;
      updateCartView();
    }

    function addProductToCart(productId) {
      console.log(`Add product ${productId} to cart ${cartId}`);
      fetch(`/api/cart/${cartId}/${productId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
      }).then(response => response.json()).then(data => {
        console.log('Product added:', data);
        updateCartView();
      }).catch(error => {
        console.error('Error adding product to cart:', error);
      });
    }

  function removeProductFromCart(productId) {
  console.log(`Remove product ${productId} from cart ${cartId}`);
  fetch(`/api/cart/${cartId}/${productId}`, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
  }).then(response => response.json()).then(data => {
    console.log('Product removed:', data);
    // Update cart view
    updateCartView();
  }).catch(error => {
    console.error('Error removing product from cart:', error);
  });
}


   async function updateCartView() {
  try {
    const response = await fetch(`/api/cart/${cartId}`);
    if (!response.ok) {
      throw new Error('Failed to fetch cart');
    }
    const cart = await response.json();
    console.log('Cart:', cart); // Log the cart object for debugging

    const cartContent = document.getElementById('cart-content');
    cartContent.innerHTML = ''; // Clear the existing content

    let totalPrice = 0;
    if (cart.products && cart.products.length > 0) {
      for (const item of cart.products) {
        console.log('Cart item:', item); // Log each item for debugging

        const productId = item.product; // Assuming item.product contains the product ID
        const quantity = item.quantity;

        // Fetch product details by product ID
        const productResponse = await fetch(`/api/products/${productId}`);
        if (!productResponse.ok) {
          throw new Error(`Failed to fetch product ${productId}`);
        }
        const product = await productResponse.json();
        console.log('Product:', product); // Log the product details for debugging

        if (product) {
          const title = product.title || 'No title'; // Use default value if undefined
          const price = product.price || 0; // Use default value if undefined

          const productElement = document.createElement('div');
          productElement.innerHTML = `
            <h3>${title}</h3>
            <p>Price: $${price}</p>
            <p>Quantity: ${quantity}</p>
            <button onclick="removeProductFromCart('${productId}')">Remove</button>
            <hr>
          `;
          cartContent.appendChild(productElement);
          totalPrice += price * quantity;
        } else {
          console.error('Product is undefined for product ID:', productId);
        }
      }

      const totalElement = document.createElement('p');
      totalElement.textContent = `Total Price: $${totalPrice}`;
      cartContent.appendChild(totalElement);
    } else {
      cartContent.innerHTML = '<p>Your cart is empty.</p>';
    }
  } catch (error) {
    console.error('Error fetching cart:', error);
  }
}

  createCart();
  </script>
</body>
</html>
