<h1>Productos</h1>
<p style="color: blue;">Holaaa! {{firstName}} Bienvenid@</p>
<p style="color: green;">admin: {{isAdmin}}</p>
<button onclick="logout()">logout</button>
<br />
<br />
<button><a href="/">Home</a></button>

<div id="container" style="display: flex; width: 100%; height: 100vh;">
  <div id="prod-div" style="flex: 1; padding: 20px; box-sizing: border-box; border-right: 1px solid #ddd; overflow-y: auto;">
    {{#if isAdmin}}
    <button style="background:green;">
      <a href="#" style="color:white;" onclick="addNewProduct()">Create New Product</a>
    </button>
    {{/if}}

    <!-- Display products -->
    {{#if products.length}}
    <ul>
      {{#each products}}
      <li id="prod-container" style="margin-bottom: 20px;">
        {{#if ../isAdmin}}
        <div id="admin-actions" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
          <button style="background-color:blue;color:white" onclick="updateProduct('{{this._id}}')">Update</button>
          <button style="background-color:red;" onclick="deleteProduct('{{this._id}}')">Delete</button>
        </div>
        {{else}}
        <div id="user-actions" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
          <button style="background-color: #4CAF50; color: white; padding: 10px 15px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; transition: background 0.3s;" onmouseover="this.style.backgroundColor='#45a049';" onmouseout="this.style.backgroundColor='#4CAF50';" onclick="addProductToCart('{{this._id}}')">+</button>
          <button style="background-color: #f44336; color: white; padding: 10px 15px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; transition: background 0.3s;" onmouseover="this.style.backgroundColor='#e53935';" onmouseout="this.style.backgroundColor='#f44336';" onclick="removeProductFromCart('{{this._id}}')">-</button>
        </div>
        {{/if}}

        <div id="prod-content">
          <h2>Title: {{this.title}}</h2>
          <p>Description: {{this.description}}</p>
          <p>$ {{this.price}}</p>
          <p>Stock: {{this.stock}}</p>
          <p>Category: {{this.category}}</p>
          <!-- You can display other product details here -->
        </div>
        <hr id="division" style="margin-top: 20px;" />
      </li>
      {{/each}}
    </ul>
    {{else}}
    <p>No products available.</p>
    {{/if}}
  </div>

  <!-- Cart section -->
  <div id="cart-div" style="flex: 1; padding: 20px; box-sizing: border-box; overflow-y: auto;">
    <h2>Your Cart <span id="cart-id"></span></h2>
    <div id="cart-section">
      <div id="cart-content"></div>
    </div>
  </div>
</div>

{{!-- SCRIPTS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> --}}
<script id="logout">
  function logout() {
    fetch("/api/sessions/logout", {
      method: "GET",
      headers: {
        "Content-Type": "application/json"
      },
    }).then((response) => {
      if (response.ok) {
        console.log("logged-out");
        window.location.href = "/api/sessions/login";
      } else {
        console.error("Error al salir de sesion");
      }
    }).catch((error) => console.error("Error:", error));
  }
</script>
<script id="addProd">
  //addProduct
  function addNewProduct() {
    const title = prompt("Enter product title:");
    const description = prompt("Enter product description:");
    const price = prompt("Enter product price:");
    const stock = prompt("Enter product stock:");
    const category = prompt("Enter product category:");
    const status = "active"; // Default status for a new product

    if (title && description && price && stock && category) {
      const newProduct = {
        title,
        description,
        price,
        stock,
        category,
        status,
      };

      fetch("/api/products", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(newProduct)
      })
        .then(response => {
          if (response.ok) {
            alert("Product added successfully!");
            location.reload(); // Reload the page after successful addition
          } else {
            return response.json().then(errorData => {
              throw new Error(errorData.error || 'Failed to add product');
            });
          }
        })
        .catch(error => {
          alert("Failed to add product: " + error.message);
        });
    }
  }
</script>
<script id="updateProd">
  function updateProduct(productId) {
    // Fetch the current product details from the server
    fetch(`/api/products/${productId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error("Failed to fetch product details");
        }
        return response.json();
      })
      .then(product => {
        // Prompt dialogs with pre-filled current values if available
        const newTitle = prompt(`${product._id} Enter new title:`, product.title);
        const newDescription = prompt("Enter new description:", product.description);
        const newPrice = prompt("Enter new price:", product.price);
        const newStock = prompt("Enter stock for product:", product.stock);
        const newCategory = prompt("Enter category for product:", product.category);
        const newStatus = prompt("Enter status 'active':", product.status);

        // Perform update only if all fields are provided
        if (newTitle !== null && newDescription !== null && newPrice !== null &&
          newStock !== null && newCategory !== null && newStatus !== null) {
          const updatedProduct = {
            title: newTitle,
            description: newDescription,
            price: parseFloat(newPrice),
            stock: parseInt(newStock, 10),
            category: newCategory,
            status: newStatus
          };

          // Send the updated data to the server
          fetch(`/api/products/${productId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(updatedProduct)
          })
            .then(response => {
              if (response.ok) {
                alert("Product updated successfully!");
                location.reload(); // Reload the page after successful update
              } else {
                return response.json().then(errorData => {
                  throw new Error(errorData.error || 'Failed to update product');
                });
              }
            })
            .catch(error => {
              alert("Failed to update product: " + error.message);
            });
        }
      })
      .catch(error => {
        alert("Failed to fetch product details: " + error.message);
      });
  }
</script>
<script id="delProd">
  function deleteProduct(productId) {
    if (confirm("Are you sure you want to delete this product?")) {
      fetch(`/api/products/${productId}`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
      })
        .then(response => {
          if (response.ok) {
            alert("Product deleted 👍");
            location.reload();
          } else {
            alert("Failed to delete product.");
          }
        })
        .catch(error => console.error("Error:", error));
    }
  }
</script>

<script id="cart-actions">
  let cartId = localStorage.getItem('cartId');

  // Function to create a new cart if no cartId exists
  async function createCart() {
    if (!cartId) {
      try {
        const response = await fetch('/api/cart', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
        });
        const data = await response.json();
        cartId = data.id;
        localStorage.setItem('cartId', cartId);
        console.log('Cart created with ID:', cartId);
      } catch (error) {
        console.error('Error creating cart:', error);
      }
    } else {
      console.log('Using existing cart ID:', cartId);
    }

    // Update the cart ID in the title
    document.getElementById('cart-id').textContent = cartId;
  }

  // Function to add a product to the cart
  function addProductToCart(productId) {
    console.log(`Add product ${productId} to cart ${cartId}`);
    fetch(`/api/cart/${cartId}/${productId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
    }).then(response => response.json()).then(data => {
      console.log('Product added:', data);
      updateCartView(cartId)
    }).catch(error => {
      console.error('Error adding product to cart:', error);
    });
  }

  // Function to remove a product from the cart
  function removeProductFromCart(productId) {
    console.log(`Remove product ${productId} from cart ${cartId}`);
    fetch(`/api/cart/${cartId}/${productId}`, {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
    }).then(response => response.json()).then(data => {
      console.log('Product removed:', data);
    }).catch(error => {
      console.error('Error removing product from cart:', error);
    });
  }

  // Create or retrieve the cart when the page loads
  window.onload = createCart;

  function updateCartView(cartId) {
    // fetch cart by Id
    fetch(`/api/cart/${cartId}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch cart');
      }
      return response.json();
    }) .then(cart => {

    const cartContent = document.getElementById('cart-content');
    cartContent.innerHTML = '';

    if (cart.products.length > 0) {
      const productList = document.createElement('ul');
      cart.products.forEach(product => {
        const productItem = document.createElement('li');
        productItem.innerHTML = `
          <h2>${product.title}</h2>
          <p>${product.description}</p>
          <p>Price: $${product.price}</p>
          <p>Quantity: ${product.quantity}</p>
          <button onclick="removeProductFromCart('${product._id}')">Remove</button>
        `;
        productList.appendChild(productItem);
      });
      cartContent.appendChild(productList);
    } else {
      cartContent.innerHTML = '<p>Your cart is empty.</p>';
    }
    })
    .catch(error => {
      console.error('Error fetching cart:', error);
      // Handle error or display an error message
      const cartContent = document.getElementById('cart-content');
      cartContent.innerHTML = '<p>Failed to load cart. Please try again later.</p>';
    });
  }
</script>
