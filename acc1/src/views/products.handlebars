<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Page</title>
  <style>
    #container {
      display: flex;
      justify-content: space-between;
    }

    #purchase-cart-btn{
      background: #4CAF50;
      color: aliceblue;
      padding: 20px;
    }

    #products-div {
      flex: 3;
      margin-right: 20px;
    }

    #cart-div {
      flex: 2;
    }

    #cart-div h2 {
      margin-top: 0;
    }

    #prod-container {
      list-style: none;
      margin-bottom: 20px;
    }

    #prod-content h2 {
      margin: 0 0 10px;
    }

    .remove-btn {
      background-color: #f44336;
      color: white;
      margin-top: 5px;
    }

    .remove-btn:hover {
      background-color: #e53935;
    }

    #user-actions button {
      margin-right: 5px;
    }
    #chat-toggle-btn {
  position: fixed;
  color: white;
  background:orange;
  top: 10px;
  right: 10px;
  z-index: 1000;
  padding: 20px;
  font-weight: bold;
  font-size: x-large;
}

#chat-bubble {
  position: fixed;
  top: 50px;
  right: 10px;
  width: 300px;
  max-height: 400px;
  background: white;
  border: 1px solid #ccc;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  z-index: 1000;
  display: flex;
  flex-direction: column;
}

#chat-container {
  display: flex;
  flex-direction: column;
  height: 100%;
}

#messages {
  flex: 1;
  list-style: none;
  padding: 10px;
  overflow-y: auto;
}

#chat-form {
  display: flex;
  padding: 10px;
  border-top: 1px solid #ccc;
}

#chat-input {
  flex: 1;
  padding: 5px;
}

#chat-form button {
  margin-left: 10px;
  background: #4CAF50;
  color: aliceblue;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}

#chat-form button:hover {
  background: #45a049;
}

  </style>
</head>
<body>
  <h1>Productos</h1>
  <p style="color: blue;">Holaaa! {{firstName}} Bienvenid@</p>
  <p style="color: green;">admin: {{isAdmin}}</p>
  <p style="color: red;">userId: {{userId}}</p>
  <button onclick="logout()">logout</button>
  <br />
  <br />
  <button><a href="/">Home</a></button>

  <div id="container">
    <div id="products-div">
      {{#if isAdmin}}
      <button style="background:green;">
        <a href="#" style="color:white;" onclick="addNewProduct()">Create New Product</a>
      </button>
      {{/if}}
      {{#if isPremium}}
      <button style="background:green;">
        <a href="#" style="color:white;" onclick="addNewProduct()">Create New Product</a>
      </button>
      {{/if}}

      <!-- Display products -->
      {{#if products.length}}
      <ul>
        {{#each products}}
        <li id="prod-container">
          {{#unless ../isAdmin}}
          <div id="user-actions" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
            <button style="background-color: #4CAF50; color: white;"
                    onmouseover="this.style.backgroundColor='#45a049';"
                    onmouseout="this.style.backgroundColor='#4CAF50';"
                    onclick="addProductToCart('{{this._id}}')"
                    data-product-id="{{this._id}}">
              +
            </button>
            <button class="remove-btn"
                    onclick="removeProductFromCart('{{this._id}}')"
                    data-product-id="{{this._id}}">
              -
            </button>
          </div>
          {{/unless}}
          <div id="prod-content">
            <h2>Title: {{this.title}}</h2>
            <p>Description: {{this.description}}</p>
            <p>$ {{this.price}}</p>
            <p>Stock: {{this.stock}}</p>
            <p>Category: {{this.category}}</p>
          </div>
          <hr />
        </li>
        {{/each}}
      </ul>
      {{else}}
      <p>No products available.</p>
      {{/if}}
    </div>

    <!-- Cart section -->
    <div id="cart-div">
      <h2>Your Cart <span id="cart-id"></span></h2>
      <div id="cart-content"></div>
      <button id="purchase-cart-btn" onclick="purchaseCart()">Purchase</button>
    </div>
  </div>

<script src="/socket.io/socket.io.js"></script>


<!-- Toggle Button -->
<button id="chat-toggle-btn">Chat</button>

<!-- Chat Bubble -->
<div id="chat-bubble" style="display: none;">
  <h2>Chat</h2>
  <div id="chat-container">
    <ul id="messages"></ul>
    <form id="chat-form" action="">
      <input id="chat-input" autocomplete="off" /><button type="submit">Send</button>
    </form>
  </div>
</div>

  <script>
    function logout() {
      fetch("/api/sessions/logout", {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      }).then(response => {
        if (response.ok) {
          console.log("logged-out");
          window.location.href = "/api/sessions/login";
        } else {
          console.error("Error logging out");
        }
      }).catch(error => console.error("Error:", error));
    }

    function addNewProduct() {
      const title = prompt("Enter product title:");
      const description = prompt("Enter product description:");
      const price = prompt("Enter product price:");
      const stock = prompt("Enter product stock:");
      const category = prompt("Enter product category:");

      if (title && description && price && stock && category) {
        const newProduct = { title, description, price, stock, category, status: "active" };
        fetch("/api/products", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(newProduct)
        }).then(response => {
          if (response.ok) {
            alert("Product added successfully!");
            location.reload();
          } else {
            response.json().then(errorData => {
              throw new Error(errorData.error || 'Failed to add product');
            });
          }
        }).catch(error => {
          alert("Failed to add product: " + error.message);
        });
      }
    }

    function updateProduct(productId) {
      fetch(`/api/products/${productId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error("Failed to fetch product details");
          }
          return response.json();
        })
        .then(product => {
          const newTitle = prompt("Enter new title:", product.title);
          const newDescription = prompt("Enter new description:", product.description);
          const newPrice = prompt("Enter new price:", product.price);
          const newStock = prompt("Enter stock for product:", product.stock);
          const newCategory = prompt("Enter category for product:", product.category);
          const newStatus = prompt("Enter status 'active':", product.status);

          if (newTitle && newDescription && newPrice && newStock && newCategory && newStatus) {
            const updatedProduct = { title: newTitle, description: newDescription, price: parseFloat(newPrice), stock: parseInt(newStock, 10), category: newCategory, status: newStatus };
            fetch(`/api/products/${productId}`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(updatedProduct)
            }).then(response => {
              if (response.ok) {
                alert("Product updated successfully!");
                location.reload();
              } else {
                response.json().then(errorData => {
                  throw new Error(errorData.error || 'Failed to update product');
                });
              }
            }).catch(error => {
              alert("Failed to update product: " + error.message);
            });
          }
        })
        .catch(error => {
          alert("Failed to fetch product details: " + error.message);
        });
    }

    function deleteProduct(productId) {
      if (confirm("Are you sure you want to delete this product?")) {
        fetch(`/api/products/${productId}`, {
          method: "DELETE",
          headers: { "Content-Type": "application/json" },
        }).then(response => {
          if (response.ok) {
            alert("Product deleted 👍");
            location.reload();
          } else {
            alert("Failed to delete product.");
          }
        }).catch(error => console.error("Error:", error));
      }
    }

    let cartId = localStorage.getItem('cartId');

  async function createCart() {
  if (!cartId) {
    try {
      const response = await fetch('/api/cart', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      const data = await response.json();
      cartId = data.id;
      localStorage.setItem('cartId', cartId);
      console.log('Cart created with ID:', cartId);
      updateCartView();
    } catch (error) {
      console.error('Error creating cart:', error);
    }
  } else {
    console.log('Using existing cart ID:', cartId);
    updateCartView();
  }
  document.getElementById('cart-id').textContent = cartId;
}

    async function updateProductStock(productId, quantity) {
      try {
        const response = await fetch(`/api/products/${productId}`);
        if (!response.ok) {
          throw new Error('Failed to fetch product details');
        }
        const product = await response.json();
        product.stock += quantity; // Adjust stock by quantity

        const updatedResponse = await fetch(`/api/products/${productId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(product),
        });
        if (!updatedResponse.ok) {
          throw new Error('Failed to update product stock');
        }
        {{!-- console.log('Product stock updated successfully'); --}}
      } catch (error) {
        console.error('Error updating product stock:', error);
      }
    }

    async function addProductToCart(productId) {
      {{!-- console.log(`Add product ${productId} to cart ${cartId}`); --}}
      try {
        const response = await fetch(`/api/cart/${cartId}/${productId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ quantity: 1 }), // Specify quantity to add
        });
        if (!response.ok) {
          throw new Error('Failed to add product to cart');
        }
        const data = await response.json();
        console.log('Product added:', data);

        // Update stock after adding to cart
        await updateProductStock(productId, -1);

        updateCartView();
      } catch (error) {
        console.error('Error adding product to cart:', error);
      }
    }

    async function removeProductFromCart(productId) {
      console.log(`Remove product ${productId} from cart ${cartId}`);
      try {
        const response = await fetch(`/api/cart/${cartId}/${productId}`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
        });
        if (!response.ok) {
          throw new Error('Failed to remove product from cart');
        }
        const data = await response.json();
        console.log('Product removed:', data);

        // Assume we get the quantity removed from the response data
        const quantity = data.quantity || 1;

        // Update stock after removing from cart
        await updateProductStock(productId, quantity);

        updateCartView();
      } catch (error) {
        console.error('Error removing product from cart:', error);
      }
    }

    async function updateCartView() {
  try {
    const response = await fetch(`/api/cart/${cartId}`);
    if (!response.ok) {
      throw new Error('Failed to fetch cart');
    }
    const cart = await response.json();
    console.log('Cart:', cart);

    const cartContent = document.getElementById('cart-content');
    cartContent.innerHTML = '';

    let totalPrice = 0;
    if (cart.products && cart.products.length > 0) {
      for (const item of cart.products) {
        const productId = item.product;
        const quantity = item.quantity;

        const productResponse = await fetch(`/api/products/${productId}`);
        if (!productResponse.ok) {
          throw new Error(`Failed to fetch product ${productId}`);
        }
        const product = await productResponse.json();

        if (product) {
          const title = product.title || 'No title';
          const price = product.price || 0;

          const productElement = document.createElement('div');
          productElement.innerHTML = `
            <h3>${title}</h3>
            <p>Price: $${price}</p>
            <p>Quantity: ${quantity}</p>
            <button class="remove-btn" data-product-id="${productId}">Remove</button>
            <hr>
          `;
          cartContent.appendChild(productElement);
          totalPrice += price * quantity;

          // Check if product is out of stock
          const addBtn = document.querySelector(`button[data-product-id="${productId}"]`);
          if (product.stock <= 0 && addBtn) {
            {{!-- addBtn.disabled = true;
            addBtn.style.opacity = '0.5';
            addBtn.onclick = null;  --}}
          } else if (addBtn) {
            addBtn.disabled = false;
            addBtn.style.opacity = '1';
            addBtn.onclick = () => addProductToCart(productId); // Re-enable onclick handler
          }
        } else {
          console.error('Product is undefined for product ID:', productId);
        }
      }

      // Enable remove buttons when the cart has items
      const removeButtons = document.querySelectorAll('.remove-btn');
      removeButtons.forEach(button => {
        button.style.opacity = '1';
        button.disabled = false;
        button.onclick = () => removeProductFromCart(button.getAttribute('data-product-id'));
      });

      const totalElement = document.createElement('p');
      totalElement.textContent = `Total Price: $${totalPrice}`;
      cartContent.appendChild(totalElement);
    } else {
      cartContent.innerHTML = '<p>Your cart is empty.</p>';

      // If cart is empty, disable all remove buttons
      const removeButtons = document.querySelectorAll('.remove-btn');
      removeButtons.forEach(button => {
        button.style.opacity = '0.5';
        button.disabled = true;
        button.onclick = null; // Remove onclick handler
      });
    }
  } catch (error) {
    console.error('Error fetching cart:', error);
  }
}


  async function purchaseCart() {
    console.log(`Attempting to purchase cart ${cartId}`);
    try {
        const response = await fetch(`/api/cart/${cartId}/purchase`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const result = await response.json();
        if (result.success) {
            alert(`Purchase successful!\nTicket: ${JSON.stringify(result.ticket, null, 2)}\nPurchase: ${JSON.stringify(result.purchase, null, 2)}`);
            // Update the cart view to reflect the remaining unprocessed items
            updateCartView();
        } else {
            alert('Purchase failed: ' + (result.error || 'Unknown error'));
        }
    } catch (err) {
        alert('Error: ' + err.message);
    }
}

    createCart();

    {{!-- CHAT SCRIPT --}}
document.addEventListener("DOMContentLoaded", () => {
  const chatToggleBtn = document.getElementById('chat-toggle-btn');
  const chatBubble = document.getElementById('chat-bubble');
  const chatForm = document.getElementById('chat-form');
  const chatInput = document.getElementById('chat-input');
  const messages = document.getElementById('messages');

  // Toggle chat visibility
  chatToggleBtn.addEventListener('click', () => {
    if (chatBubble.style.display === 'none') {
      chatBubble.style.display = 'flex';
    } else {
      chatBubble.style.display = 'none';
    }
  });

  // Initialize Socket.IO
  const socket = io();

  // Handle form submission
  chatForm.addEventListener('submit', (event) => {
    event.preventDefault();
    if (chatInput.value) {
      socket.emit('chat message', chatInput.value);
      chatInput.value = '';
    }
  });

  // Listen for messages from server
  socket.on('chat message', (msg) => {
    const li = document.createElement('li');
    li.textContent = msg;
    messages.appendChild(li);
    messages.scrollTop = messages.scrollHeight; // Scroll to bottom
  });
});

  </script>
</body>
</html>
